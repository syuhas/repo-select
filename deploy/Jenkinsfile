pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')  // Fetch GitHub token securely
        REPO_LIST_FILE = "${WORKSPACE}/github_repos.txt"  // Store repo list in workspace
    }

    stages {
        stage('Fetch GitHub Repositories') {
            steps {
                script {
                    echo "Fetching all repositories from GitHub..."

                    sh """
                    curl -s -L \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "https://api.github.com/user/repos" > repos.json
                    """

                    echo "Repositories saved to repos.json"
                }
            }
        }

        stage('Extract Repo Names & Branches URLs') {
            steps {
                script {
                    def repoInfo = readJSON(file: 'repos.json')

                    def repoChoices = repoInfo.collect { it.full_name }
                    def branchesURLs = repoInfo.collectEntries { [(it.full_name): it.branches_url.replace('{/branch}', '')] }

                    echo "Repositories: ${repoChoices}"
                    echo "Branches API URLs: ${branchesURLs}"

                    properties([
                        parameters([
                            choice(name: 'SELECTED_REPO',
                                choices: repoChoices.join("\n"),
                                description: 'Select a repository to build')
                        ])
                    ])

                    env.BRANCHES_API_URL = branchesURLs[env.SELECTED_REPO]
                }
            }
        }

        stage('Fetch Branches from Selected Repository') {
            steps {
                script {
                    echo "Fetching branches from: ${env.SELECTED_REPO} - ${env.BRANCHES_API_URL}"

                    // Fetch branches and save them to a file
                    sh """
                        curl -s -L \
                        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                        "${env.BRANCHES_API_URL}" | jq -r '.[].name' > branches.txt
                    """

                    // Read and parse branches
                    def branchChoices = readFile('branches.txt').trim().split("\n")
                    
                    // Ensure there is at least one choice
                    if (branchChoices.size() == 0 || branchChoices[0].trim() == '') {
                        branchChoices = ['main'] // Default to main if empty
                    }

                    // **Prompt user to select a branch**
                    def selectedBranch = input(
                        message: 'Select a branch to build:',
                        parameters: [
                            choice(name: 'SELECTED_BRANCH', choices: branchChoices.join("\n"), description: 'Select a branch')
                        ]
                    )

                    env.BRANCH = selectedBranch
                }
            }
        }

        // stage('User Selects Repository') {
        //     steps {
        //         script {
        //             def repoChoices = readFile(REPO_LIST_FILE).trim().split("\n")

        //             properties([
        //                 parameters([
        //                     choice(name: 'GIT_REPO',
        //                         choices: repoChoices.join("\n"),
        //                         description: 'Select the repository to build')
        //                 ])
        //             ])

        //             def userInput = input(
        //                 id: 'RepoSelection',
        //                 message: 'Select a repository to build:',
        //                 parameters: [
        //                     choice(name: 'SELECTED_REPO', choices: repoChoices, description: 'Select a repository')
        //                 ]
        //             )
        //             env.GIT_REPO = userInput
        //         }
        //     }
        // }

        // stage('Fetch Branches from Selected Repository') {
        //     steps {
        //         script {
        //             def repoName = env.SELECTED_REPO.replace('https://github.com/', '').replace('.git', '')

        //             echo "Fetching branches for repository: ${repoName}"

        //             sh """
        //             curl -s -L \
        //             -H "Authorization: Bearer ${GITHUB_TOKEN}" \
        //             "https://api.github.com/repos/${repoName}/branches" | jq -r '.[].name' > branches.txt
        //             """

        //             def branchChoices = readFile("branches.txt").trim().split("\n")

        //             // Ensure at least one branch is present
        //             if (branchChoices.size() == 0 || branchChoices[0].trim() == '') {
        //                 branchChoices = ['main']  // Default to 'main' if no branches are found
        //             }

        //             properties([
        //                 parameters([
        //                     choice(name: 'BRANCH',
        //                         choices: branchChoices.join("\n"),
        //                         description: 'Select the branch to build')
        //                 ])
        //             ])

        //             def selectedBranch = input(
        //                 id: 'BranchSelection',
        //                 message: 'Select a branch to build:',
        //                 parameters: [
        //                     choice(name: 'SELECTED_BRANCH', choices: branchChoices.join("\n"), description: 'Select a branch')
        //                 ]
        //             )

        //             env.BRANCH = selectedBranch
        //         }
        //     }
        // }
    }
}